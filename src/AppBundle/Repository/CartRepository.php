<?php

namespace AppBundle\Repository;

use Doctrine\Common\Collections\Criteria;
use Doctrine\ORM\QueryBuilder;

/**
 * CartRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CartRepository extends AbstractRepositoryBase implements CartRepositoryInterface
{
    const ALIAS         = 'c';
    const DELETED_AT    = self::ALIAS . '.deletedAt';
    const SUBMITTED_AT  = self::ALIAS . '.submittedAt';
    const ID            = self::ALIAS . '.id';

    const USER          =  self::ALIAS . '.user';
    const USER_ALIAS    = 'u';
    const USER_ID       = self::USER_ALIAS . '.id';

    const PRODUCT       = self::ALIAS . '.products';
    const PRODUCT_ALIAS = 'p';
    const PRODUCT_ID    = self::ALIAS . '.id';

    const PRICES_ALIAS  = 'pr';
    const PRICES        = self::PRODUCT_ALIAS . '.prices';
    const PRICE_ACTIVE  = self::PRICES_ALIAS . '.isActive';
    const PRICE_VALUE   = self::PRICES_ALIAS . '.value';

    const CURRENCY_ZONE_ALIAS   = 'cz';
    const CURRENCY_ZONE         = self::PRICES_ALIAS . '.currencyZone';
    const CURRENCY_ZONE_ID      = self::CURRENCY_ZONE_ALIAS . '.id';

    /** @var \AppBundle\Repository\ProductRepositoryInterface */
    private $productRepository;

    /**
     * @param \AppBundle\Repository\ProductRepositoryInterface $productRepository
     */
    public function setProductRepository(\AppBundle\Repository\ProductRepositoryInterface $productRepository) {
        $this->productRepository = $productRepository;
    }

    /**
     * @param int $userId
     * @return \AppBundle\Dto\Cart|null
     * @throws \Doctrine\ORM\ORMException
     * @throws \Doctrine\ORM\OptimisticLockException
     * @throws \Exception
     */
    public function createCart(int $userId) : ?\AppBundle\Dto\Cart
    {
        $cart = new \AppBundle\Entity\Cart();
        $cart->setUser($this->getEntityManager()->getReference(\AppBundle\Entity\User::class, (int) $userId));
        $this->getEntityManager()->persist($cart);
        $this->getEntityManager()->flush();

        return $this->getMapperService()->convert($cart,\AppBundle\Dto\Cart::class);
    }

    /**
     * @param \AppBundle\ValueObject\CartSearch $cartSearchVo
     * @throws \Doctrine\ORM\ORMException
     * @throws \Doctrine\ORM\OptimisticLockException
     */
    public function deleteCart(\AppBundle\ValueObject\CartSearch $cartSearchVo) : void
    {
        $cart = $this->find($cartSearchVo->id);
        $this->getEntityManager()->remove($cart);
        $this->getEntityManager()->flush();

        return;
    }

    /**
     * @param \AppBundle\ValueObject\CartSearch $cartSearchVo
     * @return \AppBundle\Dto\Cart|null
     * @throws \Exception
     */
    public function getCart(\AppBundle\ValueObject\CartSearch $cartSearchVo) : ?\AppBundle\Dto\Cart
    {
        $cart = $this->getCartEntity($cartSearchVo);

        return $cart ? $this->getMapperService()->convert($cart,\AppBundle\Dto\Cart::class) : null;
    }

    /**
     * @param $cartId
     * @param $productId
     * @throws \Doctrine\ORM\ORMException
     * @throws \Doctrine\ORM\OptimisticLockException
     */
    public function addProduct($cartId, $productId) : void
    {
        /** @var \AppBundle\Entity\Cart $cart */
        $cart = $this->find($cartId);
        $cart->addProduct($this->getEntityManager()->getReference(\AppBundle\Entity\Product::class, (int) $productId));
        $this->getEntityManager()->persist($cart);
        $this->getEntityManager()->flush();

        return;
    }

    /**
     * @param \AppBundle\ValueObject\CartSearch $cartSearchVo
     * @throws \Doctrine\DBAL\ConnectionException
     * @throws \Exception
     */
    public function submitCart(\AppBundle\ValueObject\CartSearch $cartSearchVo) : void
    {
        $cart = $this->getCartEntity($cartSearchVo);
        $this->getEntityManager()->beginTransaction();
        try {
            $cart->setSubmittedAt(new \DateTime("now"));
            foreach($cart->getProducts() as $product) {
                $this->productRepository->decreesProductStock($product->getId());
            }
            $this->getEntityManager()->persist($cart);
            $this->getEntityManager()->flush();
            $this->getEntityManager()->getConnection()->commit();
        } catch (\Exception $e) {
            $this->getEntityManager()->getConnection()->rollback();
            throw $e;
        }
        return;
    }

    /**
     * @param $cartId
     * @param $productId
     * @throws \Doctrine\ORM\ORMException
     * @throws \Doctrine\ORM\OptimisticLockException
     */
    public function removeProduct($cartId, $productId) : void
    {
        /** @var \AppBundle\Entity\Cart $cart */
        $cart = $this->find($cartId);
        $cart->removeProduct($this->getEntityManager()->getReference(\AppBundle\Entity\Product::class, (int) $productId));

        $this->getEntityManager()->persist($cart);
        $this->getEntityManager()->flush();

        return;
    }

    /**
     * @param \AppBundle\ValueObject\CartSearch $cartSearchVo
     * @return \AppBundle\Entity\Cart|null
     * @throws \Doctrine\ORM\NonUniqueResultException
     * @throws \Doctrine\ORM\Query\QueryException
     */
    private function getCartEntity(\AppBundle\ValueObject\CartSearch $cartSearchVo) : ?\AppBundle\Entity\Cart
    {
        $queryBuilder = $this->createQueryBuilder(self::ALIAS );
        $queryBuilder->join(self::USER , self::USER_ALIAS);
        $queryBuilder->leftJoin(self::PRODUCT, self::PRODUCT_ALIAS);
        $queryBuilder->leftJoin(self::PRICES, self::PRICES_ALIAS);
        $queryBuilder->leftJoin(self::CURRENCY_ZONE, self::CURRENCY_ZONE_ALIAS);
        $queryBuilder->select(
            self::ALIAS. ', ' .
            self::USER_ALIAS. ', ' .
            self::PRODUCT_ALIAS. ', ' .
            self::PRICES_ALIAS. ', ' .
            self::CURRENCY_ZONE_ALIAS
        );

        $criteria = $this->createActiveCartCriteria();

        $this->createSearchCriteria($criteria, $cartSearchVo);

        $queryBuilder->addCriteria($criteria);

        $cart = $queryBuilder->getQuery()->getOneOrNullResult();

        return $cart;
    }

    /**
     * @return Criteria
     */
    private function createActiveCartCriteria() : Criteria
    {
        $criteria = new Criteria();

        $criteria->andWhere(Criteria::expr()->isNull(self::DELETED_AT));
        $criteria->andWhere(Criteria::expr()->isNull(self::SUBMITTED_AT));

        return $criteria;
    }

    /**
     * @param Criteria $criteria
     * @param \AppBundle\ValueObject\CartSearch $cartSearchVo
     * @return Criteria
     */
    private function createSearchCriteria(Criteria $criteria, \AppBundle\ValueObject\CartSearch $cartSearchVo) : Criteria
    {
        if ( null !== $cartSearchVo->id ) {
            $criteria->andWhere(Criteria::expr()->eq(self::ID, $cartSearchVo->id ));
        }

        $criteria->andWhere(Criteria::expr()->eq(self::USER_ID, $cartSearchVo->userId ));

        $criteria->andWhere(
            Criteria::expr()->orX(
                Criteria::expr()->eq(self::CURRENCY_ZONE_ID, $cartSearchVo->currencyZone->id),
                Criteria::expr()->isNull(self::CURRENCY_ZONE_ID)
            )
        );

        return $criteria;
    }
}
