<?php

namespace AppBundle\Repository;

/**
 * CurrencyZoneRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
/**
 * Class CurrencyZoneRepository
 * @package AppBundle\Repository
 */
class CurrencyZoneRepository extends AbstractRepositoryBase implements CurrencyZoneRepositoryInterface
{

    /**
     * @param \AppBundle\ValueObject\CurrencyZone $currencyZoneVo
     * @return \AppBundle\Dto\CurrencyZone
     * @throws \Doctrine\ORM\ORMException
     * @throws \Doctrine\ORM\OptimisticLockException
     * @throws \Exception
     */
    public function createCurrencyZone(\AppBundle\ValueObject\CurrencyZone $currencyZoneVo): \AppBundle\Dto\CurrencyZone
    {
        $currencyZone = new \AppBundle\Entity\CurrencyZone();
        $currencyZone->setName($currencyZoneVo->name);
        $currencyZone->setCurrency($currencyZoneVo->currency);
        $currencyZone->setLocale($currencyZoneVo->locale);

        $this->validateEntity($currencyZone);

        $this->getEntityManager()->persist($currencyZone);
        $this->getEntityManager()->flush();

        return $this->getMapperService()->convert($currencyZone, \AppBundle\Dto\CurrencyZone::class);
    }

    /**
     * @param int $currencyZoneId
     * @return \AppBundle\Dto\CurrencyZone|null
     * @throws \Exception
     */
    public function getCurrencyZoneById(int $currencyZoneId) : ?\AppBundle\Dto\CurrencyZone
    {
        $currencyZone = $this->findCurrencyZoneBy(['id' => $currencyZoneId]);

        return $currencyZone ? $this->getMapperService()->convert($currencyZone, \AppBundle\Dto\CurrencyZone::class) : null;
    }

    /**
     * @param $currency
     * @param $locale
     * @return \AppBundle\Dto\CurrencyZone|null
     * @throws \Exception
     */
    public function getCurrencyZoneByCodeAndLocale($currency, $locale) : ?\AppBundle\Dto\CurrencyZone
    {
        $currencyZone = $this->findCurrencyZoneBy(['currency' => $currency, 'locale' => $locale]);

        return $currencyZone ? $this->getMapperService()->convert($currencyZone, \AppBundle\Dto\CurrencyZone::class) : null;
    }

    /**
     * @param $name
     * @return \AppBundle\Dto\CurrencyZone|null
     * @throws \Exception
     */
    public function getCurrencyByName($name) : ?\AppBundle\Dto\CurrencyZone
    {
        $currencyZone = $this->findCurrencyZoneBy(['name' => $name]);

        return $currencyZone ? $this->getMapperService()->convert($currencyZone, \AppBundle\Dto\CurrencyZone::class) : null;
    }

    /**
     * @param array $criteriaArray
     * @return \AppBundle\Entity\CurrencyZone|null
     */
    private function findCurrencyZoneBy(array $criteriaArray) : ?\AppBundle\Entity\CurrencyZone
    {
        return $this->findOneBy($criteriaArray);
    }
}
