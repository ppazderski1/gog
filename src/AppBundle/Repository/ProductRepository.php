<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Product;
use Doctrine\Common\Collections\Criteria;

use \AppBundle\ValueObject\ProductSearch as ProductSearchVo;
use \AppBundle\ValueObject\Product as ProductVo;
use Doctrine\ORM\QueryBuilder;

/**
 * ProductRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductRepository extends AbstractRepositoryBase implements ProductRepositoryInterface
{

    const ALIAS         = 'p';
    const ID            = self::ALIAS . '.id';
    const STOCK_SIZE    = self::ALIAS . '.stockSize';
    const NAME          = self::ALIAS . '.name';
    const DELETED_AT    = self::ALIAS . '.deletedAt';

    const PRICES_ALIAS  = 'pr';
    const PRICES        = self::ALIAS . '.prices';
    const PRICE_ACTIVE  = self::PRICES_ALIAS . '.isActive';
    const PRICE_VALUE   = self::PRICES_ALIAS . '.value';

    const CURRENCY_ZONE_ALIAS   = 'cz';
    const CURRENCY_ZONE         = self::PRICES_ALIAS . '.currencyZone';
    const CURRENCY_ZONE_ID      = self::CURRENCY_ZONE_ALIAS . '.id';

    const ALLOWED_SORT_FIELDS = [
        'name' => self::NAME,
        'price' => self::PRICE_VALUE
    ];

    /**
     * @param ProductVo $productVo
     * @return \AppBundle\Dto\Product
     * @throws \Doctrine\ORM\ORMException
     * @throws \Doctrine\ORM\OptimisticLockException
     * @throws \Exception
     */
    public function createProduct(ProductVo $productVo) : \AppBundle\Dto\Product
    {
        $product = new Product();
        $product->setName($productVo->name);
        $product->setStockSize($productVo->stockSize);

        $this->validateEntity($product);

        $this->getEntityManager()->persist($product);
        $this->getEntityManager()->flush();

        return $this->getMapperService()->convert($product, \AppBundle\Dto\Product::class);
    }

    /**
     * @param ProductVo $productVo
     * @throws \Doctrine\ORM\ORMException
     * @throws \Doctrine\ORM\OptimisticLockException
     * @throws \Exception
     */
    public function updateProduct(ProductVo $productVo) : void
    {
        $product = $this->find($productVo->id);
        $product->setName($productVo->name);
        $product->setStockSize($productVo->stockSize);

        $this->validateEntity($product);

        $this->getEntityManager()->persist($product);
        $this->getEntityManager()->flush();

        return;
    }

    /**
     * @param int $productId
     * @throws \Doctrine\ORM\ORMException
     * @throws \Doctrine\ORM\OptimisticLockException
     */
    public function deleteProduct(int $productId) : void
    {
        $product = $this->find($productId);
        $this->getEntityManager()->remove($product);
        $this->getEntityManager()->flush();

        return;
    }

    /**
     * @param int $productId
     * @throws \Doctrine\ORM\ORMException
     * @throws \Doctrine\ORM\OptimisticLockException
     */
    public function decreesProductStock(int $productId) : void
    {
        /** @var \AppBundle\Entity\Product $product */
        $product = $this->find($productId);
        if(null !== $product->getStockSize()) {
            $product->setStockSize($product->getStockSize() - 1);
            $this->getEntityManager()->persist($product);
            $this->getEntityManager()->flush();
        }
        return;
    }

    /**
     * @param int $productId
     * @return \AppBundle\Dto\Product|null
     * @throws \Exception
     */
    public function getProductById(int $productId) : ?\AppBundle\Dto\Product
    {
        $product = $this->findProductBy(['id' => $productId]);

        return $product ? $this->getMapperService()->convert($product,\AppBundle\Dto\Product::class) : null;
    }


    /**
     * @param int $productId
     * @param int $currencyZoneId
     * @return \AppBundle\Dto\Product|null
     * @throws \Doctrine\ORM\NonUniqueResultException
     * @throws \Doctrine\ORM\Query\QueryException
     * @throws \Exception
     */
    public function getProductInCurrencyZone(int $productId, int $currencyZoneId) : ?\AppBundle\Dto\Product
    {
        $queryBuilder = $this->createSearchQueryBuilder();
        $queryBuilder->select(self::ALIAS . ', ' . self::PRICES_ALIAS . ', ' . self::CURRENCY_ZONE_ALIAS);

        $criteria = $this->createBasicSearchCriteria();
        $criteria->andWhere(Criteria::expr()->eq(self::ID, $productId));
        $criteria->andWhere(Criteria::expr()->eq(self::CURRENCY_ZONE_ID, $currencyZoneId));

        $queryBuilder->addCriteria($criteria);

        $product = $queryBuilder->getQuery()->getOneOrNullResult();

        return $product ? $this->getMapperService()->convert($product,\AppBundle\Dto\Product::class) : null;
    }
    /**
     * @param ProductSearchVo $productSearch
     * @return array
     * @throws \Doctrine\ORM\Query\QueryException
     * @throws \Exception
     */
    public function listProducts(ProductSearchVo $productSearch) : array
    {
        $queryBuilder = $this->createSearchQueryBuilder();
        $queryBuilder->select(self::ALIAS . ', ' . self::PRICES_ALIAS . ', ' . self::CURRENCY_ZONE_ALIAS);

        $criteria = $this->createBasicSearchCriteria();
        $criteria = $this->applySearchCriteria($criteria, $productSearch);

        $queryBuilder->addCriteria($criteria);

        $this->applyLimitAndOffset($queryBuilder, $productSearch);

        $this->applyOrderBy($queryBuilder, $productSearch);

        $productsCollection = $queryBuilder->distinct()->getQuery()->getResult();

        return $this->getMapperService()->convert($productsCollection,\AppBundle\Dto\Product::class);
    }

    /**
     * @param ProductSearchVo $productSearch
     * @return int
     * @throws \Doctrine\ORM\NonUniqueResultException
     * @throws \Doctrine\ORM\Query\QueryException
     */
    public function countProducts(ProductSearchVo $productSearch) : int
    {
        $queryBuilder = $this->createSearchQueryBuilder();
        $queryBuilder->select($queryBuilder->expr()->countDistinct(self::ID));

        $criteria = $this->createBasicSearchCriteria();
        $criteria = $this->applySearchCriteria($criteria, $productSearch);

        $queryBuilder->addCriteria($criteria);

        return (int) $queryBuilder->getQuery()->getSingleScalarResult();
    }

    /**
     * @return int
     * @throws \Doctrine\ORM\NonUniqueResultException
     * @throws \Doctrine\ORM\Query\QueryException
     */
    public function countActiveProducts() : int
    {
        $queryBuilder = $this->createQueryBuilder(self::ALIAS);
        $queryBuilder->select($queryBuilder->expr()->countDistinct(self::ID));

        $criteria = new Criteria();
        $criteria->andWhere(Criteria::expr()->isNull(self::DELETED_AT));

        $queryBuilder->addCriteria($criteria);

        return (int) $queryBuilder->getQuery()->getSingleScalarResult();

    }

    /**
     * @return \Doctrine\ORM\QueryBuilder
     */
    private function createSearchQueryBuilder()
    {
        $queryBuilder = $this->createQueryBuilder(self::ALIAS);
        $queryBuilder->join(self::PRICES, self::PRICES_ALIAS);
        $queryBuilder->join(self::CURRENCY_ZONE, self::CURRENCY_ZONE_ALIAS);

        return $queryBuilder;
    }

    /**
     * @return Criteria
     */
    private function createBasicSearchCriteria()
    {
        $criteria = new Criteria();
        $criteria->andWhere(Criteria::expr()->eq(self::PRICE_ACTIVE, 1));
        $criteria->andWhere(Criteria::expr()->isNull(self::DELETED_AT));
        $criteria->andWhere(Criteria::expr()->orX(
            Criteria::expr()->isNull(self::STOCK_SIZE),
            Criteria::expr()->gt(self::STOCK_SIZE, 0)
        ));

        return $criteria;
    }

    /**
     * @param Criteria $criteria
     * @param ProductSearchVo $productSearch
     * @return Criteria
     */
    private function applySearchCriteria(Criteria $criteria, ProductSearchVo $productSearch) : Criteria
    {
        if( null !== $productSearch->currencyZone->id ) {
            $criteria->andWhere(Criteria::expr()->eq(self::CURRENCY_ZONE_ID, $productSearch->currencyZone->id));
        }

        if( null !== $productSearch->name ) {
            $criteria->andWhere(Criteria::expr()->contains(self::NAME, $productSearch->name));
        }

        return $criteria;
    }

    /**
     * @param QueryBuilder $queryBuilder
     * @param ProductSearchVo $productSearch
     */
    private function applyLimitAndOffset(QueryBuilder $queryBuilder, ProductSearchVo $productSearch) : void
    {
        $queryBuilder->setFirstResult(($productSearch->page - 1) * $productSearch->limit );
        $queryBuilder->setMaxResults($productSearch->limit);
    }

    /**
     * @param QueryBuilder $queryBuilder
     * @param ProductSearchVo $productSearch
     */
    private function applyOrderBy(QueryBuilder $queryBuilder, ProductSearchVo $productSearch) : void
    {
        foreach ($productSearch->sorts as $property => $direction) {
            if( array_key_exists($property, self::ALLOWED_SORT_FIELDS) ) {
                $queryBuilder->orderBy(self::ALLOWED_SORT_FIELDS[$property], $direction);
            }
        }
    }

    /**
     * @param array $criteriaArray
     * @return Product|null
     */
    private function findProductBy(array $criteriaArray) : ?\AppBundle\Entity\Product
    {
        $criteriaArray['deletedAt'] = null;

        return $this->findOneBy($criteriaArray);
    }
}
